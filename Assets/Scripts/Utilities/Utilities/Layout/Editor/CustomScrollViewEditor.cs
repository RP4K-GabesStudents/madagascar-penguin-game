using UnityEditor;
using UnityEngine;
using UnityEngine.UI;

// Auto-Generated by ChatGPT
namespace Utilities.Layout.Editor
{
    [CustomEditor(typeof(InfiniteScrollView))]
    public class InfiniteScrollViewEditor : UnityEditor.Editor
    {
        public override void OnInspectorGUI()
        {
            InfiniteScrollView scrollView = (InfiniteScrollView)target;

            // Enforce ScrollRect restrictions
            scrollView.movementType = ScrollRect.MovementType.Unrestricted;
            scrollView.horizontalScrollbar = null;
            scrollView.verticalScrollbar = null;
            scrollView.horizontalScrollbarVisibility = ScrollRect.ScrollbarVisibility.Permanent;
            scrollView.verticalScrollbarVisibility = ScrollRect.ScrollbarVisibility.Permanent;
            scrollView.horizontalScrollbarSpacing = 0;
            scrollView.verticalScrollbarSpacing = 0;
            scrollView.elasticity = 0;

            // Draw ScrollRect properties that should be visible
            serializedObject.Update();

            EditorGUILayout.Space();
            EditorGUILayout.LabelField("Scroll View Properties", EditorStyles.boldLabel);
            EditorGUILayout.PropertyField(serializedObject.FindProperty("m_Viewport"), new GUIContent("Viewport"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("m_Content"), new GUIContent("Content"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("itemTemplate"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("wantsOddNumber"));
            
            EditorGUILayout.Space();
            EditorGUILayout.LabelField("Directionality", EditorStyles.boldLabel);
            SerializedProperty mHorizontal = serializedObject.FindProperty("m_Horizontal");
            SerializedProperty mVertical = serializedObject.FindProperty("m_Vertical");

            if (mHorizontal.boolValue && mVertical.boolValue)
            {
                mHorizontal.boolValue = false;
                mVertical.boolValue = false;
            }
            
            EditorGUILayout.PropertyField(mHorizontal, new GUIContent("Horizontal"));
            EditorGUILayout.PropertyField(mVertical, new GUIContent("Vertical"));
            
            
            
            EditorGUILayout.Space();
            EditorGUILayout.LabelField("Control", EditorStyles.boldLabel);
            EditorGUILayout.PropertyField(serializedObject.FindProperty("allowUserControl"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("m_Inertia"), new GUIContent("Inertia"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("m_DecelerationRate"), new GUIContent("Deceleration Rate"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("m_ScrollSensitivity"), new GUIContent("Scroll Sensitivity"));
            
            
            EditorGUILayout.Space();
            EditorGUILayout.LabelField("Snapping", EditorStyles.boldLabel);
            SerializedProperty isSnappyProp = serializedObject.FindProperty("isSnappy");
            EditorGUILayout.PropertyField(isSnappyProp);
            
            if (isSnappyProp.boolValue)
            {
                SerializedProperty useAnimationCurve = serializedObject.FindProperty("useAnimationCurve");
                EditorGUILayout.PropertyField(useAnimationCurve);

                if (useAnimationCurve.boolValue)
                {
                    EditorGUILayout.PropertyField(serializedObject.FindProperty("animationCurve"));
                }


                SerializedProperty smoothTime = serializedObject.FindProperty("smoothTime");
                EditorGUILayout.PropertyField(smoothTime);
            }
        
            EditorGUILayout.Space();
            EditorGUILayout.LabelField("Observables", EditorStyles.boldLabel);
            EditorGUILayout.PropertyField(serializedObject.FindProperty("onItemHovered"), new GUIContent("On New Item Hovered"));
            EditorGUILayout.PropertyField(serializedObject.FindProperty("onItemSelected"), new GUIContent("On New Item Selected"));
        
            serializedObject.ApplyModifiedProperties();
        }
    }
}
