using System;
using System.Collections.Generic;
using Random = UnityEngine.Random;

namespace Utilities.General
{
    //Generated by GPT because I'm lazy. It's a Fisher-Yates shuffle :p
    public static class ArrayExtensions
    {
        /// <summary>
        /// Shuffles the elements of the array in place using UnityEngine.Random.
        /// </summary>
        /// <typeparam name="T">The type of the array elements.</typeparam>
        /// <param name="array">The array to shuffle.</param>
        public static void Shuffle<T>(this T[] array)
        {
            if (array == null)
                throw new System.ArgumentNullException(nameof(array));

            int n = array.Length;
            for (int i = n - 1; i > 0; i--)
            {
                // UnityEngine.Random.Range is min inclusive and max exclusive.
                int j = Random.Range(0, i + 1);

                // Swap elements
                (array[i], array[j]) = (array[j], array[i]);
            }
        }
    }
    //https://stackoverflow.com/questions/5716423/c-sharp-sortable-collection-which-allows-duplicate-keys
    public class TupleList<T1, T2> : List<Tuple<T1, T2>> where T1 : IComparable
    {
        public void Add(T1 item, T2 item2)
        {
            Add(new Tuple<T1, T2>(item, item2));
        }

        public new void Sort()
        {
            Comparison<Tuple<T1, T2>> c = (a, b) => a.Item1.CompareTo(b.Item1);
            base.Sort(c);
        }

    }
}